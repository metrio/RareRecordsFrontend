[{"/Users/metrio/RareRecordsFrontend/src/Components/LogInForm.js":"1","/Users/metrio/RareRecordsFrontend/src/Components/RecordDetailForm.js":"2","/Users/metrio/RareRecordsFrontend/src/Redux/actions.js":"3","/Users/metrio/RareRecordsFrontend/src/Redux/rootReducer.js":"4","/Users/metrio/RareRecordsFrontend/src/App.js":"5","/Users/metrio/RareRecordsFrontend/src/Containers/OwnerDiscogsSearch.js":"6","/Users/metrio/RareRecordsFrontend/src/Redux/actionTypes.js":"7","/Users/metrio/RareRecordsFrontend/src/Containers/FormContainer.js":"8","/Users/metrio/RareRecordsFrontend/src/Containers/RecordStore.js":"9","/Users/metrio/RareRecordsFrontend/src/Components/RecordStoreCards.js":"10","/Users/metrio/RareRecordsFrontend/src/Containers/RecordDiscogsSearchContainer.js":"11","/Users/metrio/RareRecordsFrontend/src/Components/RecordDetails.js":"12","/Users/metrio/RareRecordsFrontend/src/Containers/HomePage.js":"13","/Users/metrio/RareRecordsFrontend/src/index.js":"14","/Users/metrio/RareRecordsFrontend/src/Components/SignUpForm.js":"15","/Users/metrio/RareRecordsFrontend/src/Components/NavBar.js":"16","/Users/metrio/RareRecordsFrontend/src/Containers/Wishlist.js":"17","/Users/metrio/RareRecordsFrontend/src/Components/RecordCard.js":"18","/Users/metrio/RareRecordsFrontend/src/Components/SearchForm.js":"19","/Users/metrio/RareRecordsFrontend/src/Components/OwnerRecordCard.js":"20","/Users/metrio/RareRecordsFrontend/src/Components/OwnerLogInForm.js":"21","/Users/metrio/RareRecordsFrontend/src/Components/EditForm.js":"22","/Users/metrio/RareRecordsFrontend/src/reportWebVitals.js":"23","/Users/metrio/RareRecordsFrontend/src/Components/RecordstoreRecordDetails.js":"24","/Users/metrio/RareRecordsFrontend/src/Containers/Profile.js":"25","/Users/metrio/RareRecordsFrontend/src/Components/WishlistCards.js":"26"},{"size":1628,"mtime":1611808901243,"results":"27","hashOfConfig":"28"},{"size":5950,"mtime":1611869217725,"results":"29","hashOfConfig":"28"},{"size":13397,"mtime":1611764958823,"results":"30","hashOfConfig":"28"},{"size":3380,"mtime":1611867338192,"results":"31","hashOfConfig":"28"},{"size":5230,"mtime":1611862784513,"results":"32","hashOfConfig":"28"},{"size":2396,"mtime":1611801927474,"results":"33","hashOfConfig":"28"},{"size":904,"mtime":1611707435075,"results":"34","hashOfConfig":"28"},{"size":1656,"mtime":1611764567049,"results":"35","hashOfConfig":"28"},{"size":2819,"mtime":1611862874916,"results":"36","hashOfConfig":"28"},{"size":1042,"mtime":1611860186554,"results":"37","hashOfConfig":"28"},{"size":3529,"mtime":1611796137610,"results":"38","hashOfConfig":"28"},{"size":6131,"mtime":1611854771780,"results":"39","hashOfConfig":"28"},{"size":2572,"mtime":1611866928660,"results":"40","hashOfConfig":"28"},{"size":866,"mtime":1611004791642,"results":"41","hashOfConfig":"28"},{"size":2431,"mtime":1611809716851,"results":"42","hashOfConfig":"28"},{"size":3607,"mtime":1611861453272,"results":"43","hashOfConfig":"28"},{"size":2334,"mtime":1611764609351,"results":"44","hashOfConfig":"28"},{"size":3246,"mtime":1611800986275,"results":"45","hashOfConfig":"28"},{"size":942,"mtime":1611801058479,"results":"46","hashOfConfig":"28"},{"size":2304,"mtime":1611802939477,"results":"47","hashOfConfig":"28"},{"size":1627,"mtime":1611811674743,"results":"48","hashOfConfig":"28"},{"size":2171,"mtime":1611809327496,"results":"49","hashOfConfig":"28"},{"size":362,"mtime":1610377951182,"results":"50","hashOfConfig":"28"},{"size":3142,"mtime":1611864664954,"results":"51","hashOfConfig":"28"},{"size":1511,"mtime":1611440223517,"results":"52","hashOfConfig":"28"},{"size":850,"mtime":1611446671195,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11fgsaq",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/metrio/RareRecordsFrontend/src/Components/LogInForm.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/RecordDetailForm.js",[],"/Users/metrio/RareRecordsFrontend/src/Redux/actions.js",["109"],"import { ADD_TO_WISHLIST , REMOVE_FROM_WISHLIST, ADD_TO_RECORDS, UPDATE_RECORD_DETAILS , SET_RECORDS, SET_WISHLIST, LOG_IN, SIGN_UP, LOG_OUT, RETURNING, DELETE_USER, EDIT_USER, RECORD_DETAILS, OWNER_LOG_IN, RETURNING_OWNER, OWNER_LOG_OUT, SET_RECORDSTORE, ADD_TO_RECORDSTORE, UPDATE_RECORDSTORE, EXIT_DETAILS} from './actionTypes'\nimport {URL} from '../index'\n\n\nexport function loginUser(userObj) {\n  return function(dispatch, getState){\n      fetch(`${URL}/login`, {\n          method: \"POST\",\n          headers: {\n              \"Accepts\": \"application/json\",\n              \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({ user: userObj })\n      })\n          .then(r => r.json())\n          .then(checkedUserObj => {\n              localStorage.setItem(\"token\", checkedUserObj.jwt)\n              localStorage.setItem(\"user\", checkedUserObj.user)   \n\n              dispatch({type: LOG_IN, payload: checkedUserObj.user})\n          })\n          .catch(console.log)\n  }\n}\n\n\nexport function signupUser(userObj) {\n  return function (dispatch, getState) {\n      fetch(`${URL}/users`, {\n          method: \"POST\",\n          headers: {\n              \"Accepts\": \"application/json\",\n              \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({ user: userObj })\n      })\n          .then(r => r.json())\n          .then(newUserObj => {\n              localStorage.setItem(\"token\", newUserObj.jwt)\n              dispatch({type: SIGN_UP, payload: newUserObj.user})\n          })\n          .catch(console.log)\n  }\n}\n\n  export function returningUser(userObj) {\n    const wishlistRecords = userObj.records\n    return dispatch => {\n        dispatch({type: RETURNING, payload: userObj}) \n        dispatch(setWishlist(wishlistRecords))\n        }\n    } \n\n\nexport function deleteUser(userId){\n  return function (dispatch){\n      fetch(`${URL}/users/${userId}`, {\n          method: \"DELETE\",\n          headers: {\n              \"Accepts\": \"application/json\",\n              \"Content-type\": \"application/json\",\n              \"Authorization\": 'Bearer ' + localStorage.getItem(\"token\")\n          }\n      })\n      .then(r=>r.json())\n      .then(response => {\n          localStorage.clear()\n          dispatch({type: DELETE_USER})\n      })\n  }\n}\n\nexport function editUser(userObj, userId){\n  return function (dispatch){\n      fetch(`${URL}/users/${userId}`, {\n          method: \"PATCH\",\n          headers: {\n              \"Accepts\": \"application/json\",\n              \"Content-type\": \"application/json\",\n              \"Authorization\": 'Bearer ' + localStorage.getItem(\"token\")\n          },\n          body: JSON.stringify({ user: userObj })\n      })\n      .then(r=>r.json())\n      .then(returnedUser => {\n          dispatch({type: EDIT_USER, payload: returnedUser.user})\n      })\n  }\n}\n\n\n\nexport function loggingOut(){\n  return { type: LOG_OUT}\n}\n\n export function newRecordWishlist (userId, recordObj) {\n     return function (dispatch, getState) {\n        \n         fetch(`${URL}/records`, {\n             method: \"POST\",\n             headers: {\n                 \"Accepts\": \"application/json\",\n                 \"Content-Type\": \"application/json\"\n             },\n             body: JSON.stringify({\n                 album_name: recordObj.album_name,\n                 artist_name: recordObj.artist_name,\n                 discogs_id: parseInt(recordObj.discogs_id),\n                 thumb_url: recordObj.thumb_url,\n                 img_url: recordObj.img_url,\n                 year_of_release: parseInt(recordObj.year_of_release)\n             })\n         })\n         .then(r => r.json())\n         .then(record => {\n            record[\"notes\"] = recordObj.notes\n            record[\"resource_url\"] = recordObj.resource_url\n            record[\"format\"] = recordObj.formats\n            record[\"catno\"] = recordObj.catno\n            record[\"label\"] = recordObj.label\n            record[\"country\"] = recordObj.country\n\n            dispatch(addtoRecordsaddtoWishlist(userId, record))\n        })\n     }\n} \n\nexport function addtoRecordsaddtoWishlist(userId, record){\n    return dispatch => {\n        dispatch({type: ADD_TO_RECORDS, payload: record})\n        dispatch(addtoWishlist(userId, record))\n    }\n}\n\n\nexport function addtoWishlist(userId, recordDetails) {\n    return function (dispatch, getState) {        \n            fetch(`${URL}/users/${userId}/wishlists/`, {\n                method: \"POST\",\n                headers: {\n                    \"Accepts\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    user_id: parseInt(userId) ,\n                    discogs_id: parseInt(recordDetails.discogs_id) ,\n                    record_id: parseInt(recordDetails.id),\n                    notes: recordDetails.notes\n                })\n            })\n            .then(r => r.json())\n            .then(wishlistObj => {\n                console.log(recordDetails)\n                dispatch({type: ADD_TO_WISHLIST, payload: recordDetails})\n            })\n        }\n    }\n\n\nexport function removeFromWishlist(userId, wishlistId, recordId) {\n    return function(dispatch, getState) {\n        fetch(`${URL}/users/${userId}/wishlists/${wishlistId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(resp => {\n            dispatch({type: REMOVE_FROM_WISHLIST, payload: recordId})\n            console.log(resp)\n        })\n    }\n}\n\nexport function setWishlist(wishlistRecords) {\n    return function (dispatch, getState){\n            dispatch({type: SET_WISHLIST, payload: wishlistRecords})\n    }\n\n}\n\n\nexport function setRecords() {\n    return function (dispatch, getState){\n        fetch(`${URL}/records`,{\n            method: \"GET\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(r => r.json())\n            .then(records => {\n              return dispatch({type: SET_RECORDS, payload: records})\n           })\n        \n    }\n}\n\nexport function recordDetails(recordObj) {\n\n    return function (dispatch, getState){\n\n        fetch(`https://api.discogs.com/masters/${recordObj.discogs_id}`)\n        .then(resp => resp.json())\n        .then(details => {\n            recordObj[\"tracklist\"] = details.tracklist\n            return dispatch({type: RECORD_DETAILS, payload: recordObj})\n        })\n    }\n}\n\nexport function exitDetails() {\n    return ({type: EXIT_DETAILS})\n}\n        \n\nexport function addtoRecords(recordObj) {\n    return function (dispatch, getState) {\n\n        fetch(`${URL}/records`, {\n            method: \"POST\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                 album_name: recordObj.record_name,\n                 artist_name: recordObj.artist_name,\n                 discogs_id: parseInt(recordObj.discogs_id),\n                 thumb_url: recordObj.thumb_url,\n                 img_url: recordObj.img_url,\n                 year_of_release: parseInt(recordObj.year_of_release)\n            })\n        })\n        .then(r => r.json())\n        .then(record => {\n                 record[\"notes\"] = recordObj.notes\n                 record[\"resource_url\"] = recordObj.resource_url\n                 record[\"format\"] = recordObj.formats\n                 record[\"catno\"] = recordObj.catno\n                 record[\"label\"] = recordObj.label\n                 record[\"country\"] = recordObj.country\n            return dispatch({type: ADD_TO_RECORDS, payload: record})\n        })\n        \n    }\n}\n\nexport function loginOwner(ownerObj) {\n    return function(dispatch, getState){\n        fetch(`${URL}/owner-login`, {\n            method: \"POST\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({ owner: ownerObj })\n        })\n            .then(r => r.json())\n            .then(checkedOwnerObj => {\n                localStorage.setItem(\"token\", checkedOwnerObj.jwt)  \n                localStorage.setItem(\"owner\", checkedOwnerObj.owner)  \n\n                dispatch({type: OWNER_LOG_IN, payload: checkedOwnerObj.owner})\n  \n            })\n            .catch(console.log)\n    }\n  }\n\nexport function ownerReturning(ownerObj) {\n    return dispatch => {\n        dispatch({type: RETURNING_OWNER, payload: ownerObj}) \n        }\n    } \n\nexport function ownerlogOut(){\n    return { type: OWNER_LOG_OUT}\n}\n\nexport function setRecordStore(){\n    return function(dispatch, getState){\n        fetch(`${URL}/record_stores/1`,{\n            method: \"GET\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(r => r.json())\n        .then(recordStoreObj => {\n            dispatch({type: SET_RECORDSTORE, payload: recordStoreObj.records})\n        })\n    }\n}\n\n/** Doesn't Exist in backend,\n * add to Records, then add to RecordStoreRecords,\n * Update FrontEnd Records and RecordStore\n */\nexport function addtoRecordsAndRecordStore(ownerObj, recordObj){\n    return function (dispatch, getState) {\n        \n        fetch(`${URL}/records`, {\n            method: \"POST\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                album_name: recordObj.album_name,\n                artist_name: recordObj.artist_name,\n                catno: recordObj.catno,\n                condition: recordObj.condition,\n                country: recordObj.country,\n                description: recordObj.description,\n                discogs_id: parseInt(recordObj.discogs_id),\n                format: recordObj.format,\n                label: recordObj.label,\n                official: recordObj.official,\n                thumb_url: recordObj.thumb_url,\n                img_url: recordObj.img_url,\n                in_store: recordObj.in_store,\n                year_of_release: parseInt(recordObj.year_of_release)\n            })\n        })\n        .then(r => r.json())\n        .then(record => {\n            console.log(record)\n            dispatch(finishAddtoStore(ownerObj, record))\n       })\n    }\n}\n\n/**Now record exists in backend, add to RecordStoreRecords,\n * update Both Records and RecordStore with new record\n */\nexport function finishAddtoStore(ownerObj, record){\n    return dispatch => {\n        dispatch({type: ADD_TO_RECORDS, payload: record})\n        dispatch({type: ADD_TO_RECORDSTORE, payload: record})\n        dispatch(addtoRecordstoreRecords(ownerObj, record))\n    }\n}\n\n/**Record Already Exists in backend \n * so we will update it first\n*/\nexport function updateBackendRecords(owner, recordObj){\n    return function(dispatch, getState){\n        fetch(`${URL}/records/${recordObj.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: parseInt(recordObj.id),\n                album_name: recordObj.album_name,\n                artist_name: recordObj.artist_name,\n                catno: recordObj.catno,\n                condition: recordObj.condition,\n                country: recordObj.country,\n                description: recordObj.description,\n                discogs_id: parseInt(recordObj.discogs_id),\n                format: recordObj.format,\n                label: recordObj.label,\n                official: recordObj.official,\n                thumb_url: recordObj.thumb_url,\n                img_url: recordObj.img_url,\n                in_store: recordObj.in_store,\n                year_of_release: parseInt(recordObj.year_of_release)\n            })\n        })\n        .then(r => r.json())\n        .then(record => {        \n            dispatch(finishUpdateAndAdd(owner, record))\n        })\n    }\n}\n\n/**Finish Send Request to add a new RecordstoreRecord,\n * Update Frontend Records, Add to Front End RecordStore\n*/\nexport function finishUpdateAndAdd(ownerObj, recordObj){\n    return dispatch => {\n        \n        dispatch({type: UPDATE_RECORD_DETAILS, payload: recordObj})\n        dispatch({type: ADD_TO_RECORDSTORE, payload: recordObj})\n        dispatch(addtoRecordstoreRecords(ownerObj, recordObj))\n    }\n}\n\n\n//Add to backend RecordstoreRecords\nexport function addtoRecordstoreRecords(owner, record){\n    return function(dispatch, getState){\n        fetch(`${URL}/record_stores/${owner.record_store.id}/recordstore_records`, {\n            method: \"POST\",\n            headers: {\n                \"Accepts\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                record_store_id: parseInt(owner.record_store.id),\n                discogs_id: parseInt(record.discogs_id),\n                record_id: parseInt(record.id)\n            })\n        })\n        .then(r => r.json())\n        .then(recordstoreRecordObj => {\n            console.log(recordstoreRecordObj)\n        })\n    }\n}\n\n\n",["110","111"],"/Users/metrio/RareRecordsFrontend/src/Redux/rootReducer.js",[],"/Users/metrio/RareRecordsFrontend/src/App.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/OwnerDiscogsSearch.js",[],"/Users/metrio/RareRecordsFrontend/src/Redux/actionTypes.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/FormContainer.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/RecordStore.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/RecordStoreCards.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/RecordDiscogsSearchContainer.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/RecordDetails.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/HomePage.js",["112","113","114"],"/Users/metrio/RareRecordsFrontend/src/index.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/SignUpForm.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/NavBar.js",[],["115","116"],"/Users/metrio/RareRecordsFrontend/src/Containers/Wishlist.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/RecordCard.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/SearchForm.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/OwnerRecordCard.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/OwnerLogInForm.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/EditForm.js",[],"/Users/metrio/RareRecordsFrontend/src/reportWebVitals.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/RecordstoreRecordDetails.js",[],"/Users/metrio/RareRecordsFrontend/src/Containers/Profile.js",[],"/Users/metrio/RareRecordsFrontend/src/Components/WishlistCards.js",[],{"ruleId":"117","severity":1,"message":"118","line":1,"column":277,"nodeType":"119","messageId":"120","endLine":1,"endColumn":295},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"117","severity":1,"message":"125","line":3,"column":8,"nodeType":"119","messageId":"120","endLine":3,"endColumn":13},{"ruleId":"117","severity":1,"message":"126","line":14,"column":9,"nodeType":"119","messageId":"120","endLine":14,"endColumn":19},{"ruleId":"127","severity":1,"message":"128","line":52,"column":25,"nodeType":"129","endLine":52,"endColumn":163},{"ruleId":"121","replacedBy":"130"},{"ruleId":"123","replacedBy":"131"},"no-unused-vars","'UPDATE_RECORDSTORE' is defined but never used.","Identifier","unusedVar","no-native-reassign",["132"],"no-negated-in-lhs",["133"],"'diver' is defined but never used.","'intervalId' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["132"],["133"],"no-global-assign","no-unsafe-negation"]